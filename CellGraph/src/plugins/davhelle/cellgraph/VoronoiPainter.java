package plugins.davhelle.cellgraph;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.util.Iterator;
import java.util.List;

import be.humphreys.simplevoronoi.GraphEdge;
import icy.canvas.IcyCanvas;
import icy.main.Icy;
import icy.painter.AbstractPainter;
import icy.sequence.Sequence;

/**
 * VoronoiPainter depicts the voroni diagram generated by be.humphreys.simplevoronoi package
 * 
 * TODO: graphics dimension should scale with zoom (previously automatic with ROI)
 * 
 * @author Davide Heller
 *
 */
public class VoronoiPainter extends AbstractPainter{
	
	private List<GraphEdge> voronoi_edges;
	private int time_point;
	private boolean PLOT_CELL_IDS;
	
	public VoronoiPainter(List<GraphEdge> voronoi_edges, boolean PLOT_CELL_IDS, int time_point){
		this.time_point = time_point;
		this.voronoi_edges = voronoi_edges;
		this.PLOT_CELL_IDS = PLOT_CELL_IDS;
	}
	
    @Override
    public void paint(Graphics2D g, Sequence sequence, IcyCanvas canvas){
    	
    	//only display when on selected frame
    	if(Icy.getMainInterface().getFirstViewer(sequence).getT() == time_point){

    		g.setStroke(new BasicStroke((float)0.5));
    		g.setColor(Color.GREEN);

    		Iterator<GraphEdge> edge_it = voronoi_edges.iterator();
    		while(edge_it.hasNext()){
    			GraphEdge next = edge_it.next();
    			g.drawLine((int)next.x1, (int)next.y1, (int)next.x2, (int)next.y2);
    			
    			if(PLOT_CELL_IDS){
    				//print belonging sites in the middle of the line
    				int x_text = (int)(next.x1 + 0.5*(next.x2 - next.x1));
    				int y_text = (int)(next.y1 + 0.5*(next.y2 - next.y1));
    				String text = next.site1 + ":" + next.site2; 

    				int fontSize = 1;
    				g.setFont(new Font("TimesRoman", Font.PLAIN, fontSize));
    				g.drawString(text,x_text,y_text);
    			}
    		
    		}
    	}
    	
    }
	

}
