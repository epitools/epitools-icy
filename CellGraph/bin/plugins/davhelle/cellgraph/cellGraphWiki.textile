%{font-size:30}CellGraph Plugin Tutorial%

+Contents+

{toc:min}

h2. Plugin requirements

Assuming that you loaded the GIT repository into eclipse, the following software needs to be added:

* Icy: an open community platform for bioimage informatics ( "homepage":http://icy.bioimageanalysis.org )
* Icy4Eclipse: a nice and easy way to integrate icy into eclipse ( "tutorial":http://icy.bioimageanalysis.org/index.php?display=startDevWithIcy )
* JGraphT: a free Java graph library ( "sourceforge":http://sourceforge.net/projects/jts-topo-suite/ )
* JTS: the Java topology suite ( "sourceforge":http://sourceforge.net/projects/jgrapht/ )

To successfully link the last to libraries change the Build path of your java project by adding the external jar files.

h2. Plugin launch

Start icy from within Eclipse by clicking on the Debug button (R=Release; D=Debug; U=Update Mode). Icy should now be open otherwise check that the icy4eclipse preferences are set right (see tutorial above).
!{width:40%}tutorial_images/start_icy.png!!{width:40%}tutorial_images/icy_main.png!

switch to the _Plugins_ tab and select the CellGraph from the _Other Plugins_ menu item (see image below)
!{width:40%}tutorial_images/icy_plugin_tab.png!!{width:40%}tutorial_images/icy_open_CellGraph.png!

you should now see GUI interface of _CellGraph_

!{width:20%}tutorial_images/CellGraph.png!

h3. Work Flow Concept

First open the image you want to overlay the result on (in absense also an empty stack can do the job)

The current version of CellGraph is a two step procedure. First through the main plugin (_CellGraph_) we specify the input files and set the tracking (optional) which creates the SpatioTemporal Graph structure ( "UML diagram":tutorial_images/CellGraphUML.png ). If the _Do tracking_ option has been used the tracking result is now shown as overlay. Otherwise in the second step through the painter plugin (_CellPainter_) we can create various overlays that all use the Spatiotemporal graph structure created by _CellGraph_. As a technical note, the java graph object is exchanged between the two plugins through the _Swimming pool_ feature of ICY. 

!{width:40%}tutorial_images/CellGraph_Workflow.png!

h3. CellGraph: Create a Spatiotemporal Graph (stGraph)

h4. Input Parameters

|_Input type|Specifies the type of input the Plugin will receive[1]|
|_Direct input| Option to automatically adjust to an input from a specific segmentation tool[2]|
|_Select file| Launches a file selection menu will appear and the user is asked to select the first skeleton to be read in (see exceptions for _direct input_ choices)|
|_Time points| Number of files that should be read in by the plugin. To use this function it is important that the files follow the naming convention which defines that last two characters of the name (before the .ext) specify the time point|
|_Eliminate one border line| Removes the most outer ring of cells which might have suffered from sub-optimal segmentation.|
|_Remove too small cells| Eliminate cells that are smaller than a threshold area which can be specified in the menu active after selection (see below). This can be useful if the skeleton happened to contain simple points.|

fn1. Currently supported _input types_:
* 8-connected-skeleton files ( all common image extensions are supported ) 
* VTK Polydata mesh files ( "specification":http://www.cacr.caltech.edu/~slombey/asci/vtk/vtk_formats.simple.html )

fn2. Currently supported segmentation tools for _direct input_:
* SeedWater Segmenter (choose the first file in output dir, Skeletons are adjusted to input requirements, needs small cell elimination)
* Packing Analyzer (choose the first input file, tool recognizes the folder structure where handcorrection.png should be stored)


h4. Tracking Parameters

|_Algorithm| Tracking algorithm to be used for linking the cells in time |
|_Max. displacement| Maximum displacements between consecutive frames of a single cell center |
|_Linkrange| How many frames ahead the information should be propagated (limited by the amount of moving)| 
|_Write TrackID| Label the cells in the tracking overlay with their number ID|
|_Highlight Mistakes| Do not fill the cells with their assigned tracking color but highlight likely mistakes (INSERT LEGEND!)|
|_Load division file| Add a file specifying the divisions occurred in the sample (Revision needed)|
|_Draw displacement| Add little arrows to show were the cell center is migrating from frame to frame| 

h4. Execute CellGraph

To run the plugin just hit the triangle on the left-bottom-corner of the GUI window. The stGraph object will be automatically inserted into the ICY swimming pool (ICYsp) cache structure, unless the relative option is unselected. 

h3. CellPainter: Create an overlay over the active sequence

By choosing one of the available painters (see below) the current stGraph in the ICYsp is used to generate the specific overlay / _Painter type_ 

!{Width: 20%}tutorial_images/CellPainter_main.png!

|_CELLS|Cell view of the tissue. _Polygons_ outlines the cells, while _Centers_ places a dot on the centroid.  cells obtained by a skeleton can be furthermore abstracted by a minimal polygon which is based on all the branching points between 3/4 cells (_Derived Polygon_ option). Also if wished the cells centers can be written out as text file (TO BE REFINED, BETA).|
|_BORDER|Evidences all the cells on the border of the segmented area
|_VORONOI|Generates a voronoi diagram (ADD definition link) from all the centroids. _Area difference_ evidences through a color code whether the area of the segmented cell is bigger or smaller than the area of the correspondent voronoi cell.|
|_POLYGON_CLASS|Generates an overview which writes the neighbor number in each cell, i.e. the number of faces of the minimal polygon.|
|_READ_DIVISIONS|Takes an input file listing all the divisions happened and propagates the information when tracking is available|
|_AREA_THRESHOLD|Highlights all the cells that are bigger than the given area threshold.|


h2. Example Skeleton

The _tutorial images_ folder contains a skeleton file generated with SeedWater which can be used for testing purposes, i.e. Outline_0_000.tif. It works with the default parameter settings (_Direct input_: SeedWater) and as base layer you can open the same file as in the example figure below. Since SeedWater does not produce conventional skeletons, it is automatically pre-processed with a renewed ImageJ skeletonization removing simple points (see @cellgraph.io.SkeletonReader.java@ for more details).

!{width:80%}tutorial_images/Example_Skeleton.png!

_This tutorial was written by Davide Heller (Basler Lab 2013(R))_




